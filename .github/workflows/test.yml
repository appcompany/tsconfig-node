name: Testing

on:
  push:
    branches:
      - main
  schedule:
    - cron: "12 5 * * *"

jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: [12, 14, 16]
    runs-on: ${{ matrix.os }}
    name: Test Rules
    outputs:
      current_version: ${{ steps.versions.outputs.current_version }}
      published_version: ${{ steps.versions.outputs.published_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Node Modules
        run: npm install
      - name: Run Tests
        run: npm test
      - name: Export Versions
        id: versions
        run: |
          echo ::set-output name=current_version::$(node -e "console.log(require('./package.json').version);")
          echo ::set-output name=published_version::$(npm view @onezerocompany/tsconfig-node version)
  create_release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: test
    if: needs.test.outputs.current_version != needs.test.outputs.published_version
    steps:
      - name: Create Release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.TOKEN_GITHUB_RELEASES }}
          script: |
            github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.test.outputs.current_version }}'
            })
